module PWM_timers
dim on_a_0 as Byte[7][4][7][2][4]  external ''[week-1][chanel-1][pwm_chanel-1][on_off2-1][0]     4 end changed to 5 for adding second setting to on...
dim on_a_1 as Byte[7][4][7][2][4]  external ''[week-1][chanel-1][pwm_chanel-1][on_off2-1][0]     4 end changed to 5 for adding second setting to on...
'dim on_a_1 as integer[7][4][7][2][4]  external ''[week-1][chanel-1][pwm_chanel-1][on_off2-1][0]
'dim on_a_0 as byte[7][1][3][2][4]   external'' on_a_0 [week-1][chanel-1][pwm_chanel-1][on_off22-1][0]


dim txt as string[19]   external
'###################timer #################
Dim _ss as integer volatile data
Dim _zz as word volatile data
dim anz as string[10]
dim freq as longword
ztmp as integer
korrekturfaktor as float
_count as integer
_a as integer

 dim st as string[4]   external
  dim output as integer external

Sub procedure pwm_set_1B(dim pulse_width as  char )
sub procedure SetPWM0(dim duty as integer)
sub procedure PWM_MAKE(dim jj as byte,dim max_duty as integer,dim Pwm_chanel_make as byte)
sub procedure on_off_initial (dim on_off22,en,hr,mint,prc as byte)
sub procedure Lcd_0() external
'sub Function  strToInt1( dim byref  st1 as string[4]) as integer external
sub procedure strToInt1()     external
sub procedure PWM_Initialize ()
sub procedure  WDT_on()
sub procedure PWM_Port_Initialize ()
implements



'################# timer pwm ####################
''    https://www.mikroe.com/forum/viewtopic.php?f=72&t=29914

 Sub procedure pwm_set_1B(dim pulse_width as  char )

OCR1BL = pulse_width ''  //Load Pulse width
OCR1AL = pulse_width ''  //Load Pulse width
OCR0 = pulse_width
OCR2 = pulse_width
'/*start timer:
'without presscaler
'Non inverted mode in OC2 pin;
'phase corect PWM*/
TCCR0 = (1<<FOC2)or (1<<COM21)or(1<<COM20) or(1<<WGM20) or (1<<CS00)
TCCR1A  = (1<<FOC2)or(1<<COM21)or(1<<COM20)or (1<<WGM20)or(1<<CS00)
TCCR2 = (1<<FOC2)or(1<<COM21)or(1<<COM20)or(1<<WGM20) or(1<<CS00)
'//Start PWM
TCCR1B = 1<<CS10
end sub

Sub procedure Timer2_Compare iv IVT_ADDR_TIMER2_COMP 'L?st aus alle (8Mhz/1024/125) 16ms
inc(_ss)
End sub

sub procedure Timer0_overflow iv IVT_ADDR_TIMER0_OVF
inc(_zz)
TIFR.TOV0=0
'portf0_bit=not Portf0_bit
end sub

sub procedure SetRegister()
'TCCR0B.B0=1'' //CS00 --->Clock Select--->No Prescaling
'TCCR0B.B1=0 ''//CS01
'TCCR0B.B2=0 ''//CS02


'/*
'//FOC0 WGM00 COM01 COM00 WGM01 CS02 CS01 CS00 = TCCR0
'TCCR0 = 0b01111001
'*/
TCCR2.WGM21=1 'CTC Mode Aktivierung Timer2
TCCR2.COM20=1 'set OCR Flag bei "Compare Match"
TCCR2.COM21=1 'set OCR Flag bei "Compare Match"
'TCCR2 = TCCR2 or 00111000
TCCR0.CS02=1 'Ext Flanke Interrupt (T0)
TCCR0.CS01=1
TCCR0.CS00=1
'TCCR0 = TCCR0 or 00000111
TCCR2.CS22=1 'Set Prescaler Timer2 1024 setzen
TCCR2.CS21=1
TCCR2.CS20=1
'TCCR2 = TCCR2 or 00000111
OCR2=124 'Set Output Compare register Timer2 to 124 (for Loop 0-124 => 125)
TIMSK.OCIE2=1 ' Enable comp match flag interrupt Timer 2
TIMSK.TOIE0=1 ' Enable OV flag interrupt Timer 0
SREG.SREG_I=1
End Sub
  ''################# SetPWM0 Initial #################
'  www.extremeelectronics.co.in/avr-tutorials/pwm-signal-generation-by-using-avr-timers-part-ii/
sub procedure SetPWM0(dim duty as integer)
'   TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00)
'   TCCR0 = (1<<FOC2)or (1<<COM21)or(1<<COM20) or(1<<WGM20) or (1<<CS00)
   OCR0=duty
end sub

 sub procedure PWM_MAKE_as_max(dim jj as byte,dim max_duty as integer)
 dim  ii as integer
      jjyear as float
'        jjyear=jj
      jjyear=ceil((jj*max_duty)/100)
      FloatToStr(jjyear, st)
'      st[3]=(jjyear div 1000)  + 48
'       st[2]=((jjyear mod 1000)div 100)  + 48
'       st[1]= (((jjyear mod 1000)mod 100) div 10)  + 48
'       st[0]= ((((jjyear mod 1000)mod 100) mod 10) div 1) + 48
       Lcd_0()
'         ii = StrToInt(st)
         strToInt1()
         ii =output
         IntToStr(ii, txt)
     Lcd_Out(1,1,st)
     Lcd_Out(2,1,txt)
     Delay_mS(1000)
  end sub
 sub procedure PWM_MAKE(dim jj as byte,dim max_duty as integer,dim Pwm_chanel_make as byte)
'      dim st as string[4]
      dim  ii as integer
        jjyear as float
'        jjyear=jj
      jjyear=ceil((jj*max_duty)/100)
      FloatToStr(jjyear, st)
'      st[3]=(jjyear div 1000)  + 48
'       st[2]=((jjyear mod 1000)div 100)  + 48
'       st[1]= (((jjyear mod 1000)mod 100) div 10)  + 48
'       st[0]= ((((jjyear mod 1000)mod 100) mod 10) div 1) + 48
       Lcd_0()
'         ii = StrToInt(st)
'         strToInt1()
'         ii =output
          ii = integer (jjyear)
         IntToStr(ii, txt)
     Lcd_Out(1,1,st)
     Lcd_Out(2,6,txt)
     IntToStr(jj, txt)
     Lcd_Out(2,1,txt)

'     Delay_mS(100)
     select case Pwm_chanel_make
     case 1
'     jj=floor((jj*1024)/100)
'           PWM_MAKE_as_max(jj,1024) ii=output
          PWM16bit_Change_Duty(ii, _TIMER1_CH_A )
     case 2

'          jj=ceil((jj*1024)/100)
          PWM16bit_Change_Duty(ii,_TIMER1_CH_B )
     case 3
'     PWM_MAKE_as_max(jj,512) ii=output
'     jj=floor((jj*255)/100)
'          PWM2_Set_Duty(ii)
          PWM16bit_Change_Duty(ii,2 )
     case 4
'     PWM_MAKE_as_max(jj,512) ii=output
'     jj=floor((jj*255)/100)
          if jj=0 then
             SetPWM0(max_duty-ii)
           else
                SetPWM0(max_duty-ii)
'                PWM1_Set_Duty(ii)
           end if


     case 5
'     PWM_MAKE_as_max(jj,512) ii=output
'     jj=floor((jj*255)/100)
'          PWM16bit_Change_Duty(ii, _TIMER3_CH_A )
     case 6
'     PWM_MAKE_as_max(jj,512) ii=output
'     jj=floor((jj*255)/100)
'          PWM16bit_Change_Duty(ii, _TIMER3_CH_B )
     case 7
'     PWM_MAKE_as_max(jj,512) ii=output
'     jj=floor((jj*255)/100)
'          PWM16bit_Change_Duty(ii, _TIMER3_CH_C )
     end select
 end sub
 sub procedure PWM_MAKE_Stop(dim jj as byte,dim max_duty as integer,dim Pwm_chanel_make as byte)
'      dim st as string[4]
      dim  ii as integer
        jjyear as float
'        jjyear=jj
      jjyear=ceil((jj*max_duty)/100)
      FloatToStr(jjyear, st)
'      st[3]=(jjyear div 1000)  + 48
'       st[2]=((jjyear mod 1000)div 100)  + 48
'       st[1]= (((jjyear mod 1000)mod 100) div 10)  + 48
'       st[0]= ((((jjyear mod 1000)mod 100) mod 10) div 1) + 48
       Lcd_0()
'         ii = StrToInt(st)
'         strToInt1()
'         ii =output
          ii = integer (jjyear)
         IntToStr(ii, txt)
     Lcd_Out(1,1,st)
     Lcd_Out(2,6,txt)
     IntToStr(jj, txt)
     Lcd_Out(2,1,txt)

'     Delay_mS(100)
     select case Pwm_chanel_make
     case 2
'     jj=floor((jj*1024)/100)
'           PWM_MAKE_as_max(jj,1024) ii=output
          PWM16bit_Stop( _TIMER1_CH_A ) 'PWM16bit_Change_Duty(ii, _TIMER1_CH_A )
     case 3

'          jj=ceil((jj*1024)/100)
          PWM16bit_Stop( _TIMER1_CH_B ) 'PWM16bit_Change_Duty(ii,_TIMER1_CH_B )
     case 4
'     PWM_MAKE_as_max(jj,512) ii=output
'     jj=floor((jj*255)/100)
'          PWM2_Set_Duty(ii)
          PWM16bit_Stop( 2 ) 'PWM16bit_Change_Duty(ii,2 )
     case 1
'     PWM_MAKE_as_max(jj,512) ii=output
'     jj=floor((jj*255)/100)
          if jj=0 then
             SetPWM0(max_duty-ii)
           else
                SetPWM0(max_duty-ii)
'                PWM1_Set_Duty(ii)
           end if


     case 5
'     PWM_MAKE_as_max(jj,512) ii=output
'     jj=floor((jj*255)/100)
'          PWM16bit_Change_Duty(ii, _TIMER3_CH_A )
     case 6
'     PWM_MAKE_as_max(jj,512) ii=output
'     jj=floor((jj*255)/100)
'          PWM16bit_Change_Duty(ii, _TIMER3_CH_B )
     case 7
'     PWM_MAKE_as_max(jj,512) ii=output
'     jj=floor((jj*255)/100)
'          PWM16bit_Change_Duty(ii, _TIMER3_CH_C )
     end select
 end sub
' ######################################################################################################################################
sub procedure PWM_Port_Initialize ()
    #IFDEF ATmega128
      ''################PWM Ports #############
       DDB4_bit = 1                    ' Set PORTB pin 3 as output pin for the PWM (according to datasheet)
       DDB5_bit = 1                    ' Set PORTB pin 3 as output pin for the PWM (according to datasheet)
       DDB6_bit = 1                    ' Set PORTB pin 3 as output pin for the PWM (according to datasheet)
       DDB7_bit = 1                    ' Set PORTB pin 3 as output pin for the PWM (according to datasheet)
      ''################timer test part #############
    #ENDIF
    #IFDEF ATmega32
      ''################PWM Ports #############
       DDB3_bit = 1                    ' Set PORTB pin 3 as output pin for the PWM (according to datasheet)
       DDD7_bit = 1                    ' Set PORTB pin 3 as output pin for the PWM (according to datasheet)
       DDD4_bit = 1                    ' Set PORTB pin 3 as output pin for the PWM (according to datasheet)
      ''################timer test part #############
    #ENDIF
end  sub
' ######################################################################################################################################

sub procedure PWM_Initialize ()
dim j as byte
    k as integer
J=0  

    
'    PWM1_Init(_PWM1_FAST_MODE, _PWM1_PRESCALER_8, _PWM1_NON_INVERTED,J)
'     TCCR0 = (1<<FOC2) or (1<<COM21) or (1<<COM20) or (1<<WGM20) or (1<<CS00) ''Pwm0 or pwm1 in meicrobasic
    '' From mikroc pwm
    
'    ########  changed for Atmega32 #########
'    ASSR=0<<AS0
'    ########  changed for Atmega32 #########
    
    TCCR0=(1<<WGM00) or (1<<COM01) or (1<<COM00) or (1<<WGM01) or (1<<CS02) or (0<<CS01) or (1<<CS00)
    TCNT0=0x00
    '' From mikroc pwm
'    PWM2_Init(_PWM2_FAST_MODE, _PWM2_PRESCALER_8, _PWM2_NON_INVERTED, J)
    PWM16bit_Init(_PWM16_PHASE_CORRECT_MODE_8BIT, _PWM16_PRESCALER_16bit_8, _PWM16_NON_INVERTED, j , _TIMER1)
    PWM16bit_Init(_PWM16_PHASE_CORRECT_MODE_8BIT, _PWM16_PRESCALER_16bit_8, _PWM16_NON_INVERTED, j , 2)
'    PWM16bit_Init(_PWM16_PHASE_CORRECT_MODE_8BIT, _PWM16_PRESCALER_16bit_8, _PWM16_NON_INVERTED, j , _TIMER1)
'    PWM_C0_Init()
    PWM1_Set_Duty(j)
    PWM2_Set_Duty(j)
'    PWM3_Set_Duty(j)   ' Se
    ocr0=0 ocr2=0

    for k=10 to 0  step -5
        PWM_MAKE (k*10,255,1)''(dim jj as byte,dim max_duty,Pwm_chanel as integer)
        PWM_MAKE (k*10,255,2)''(dim jj as byte,dim max_duty,Pwm_chanel as integer)
        PWM_MAKE (k*10,255,3)''(dim jj as byte,dim max_duty,Pwm_chanel as integer)
        PWM_MAKE (k*10,255,4)''(dim jj as byte,dim max_duty,Pwm_chanel as integer)
        delay_ms(50)
    next k
    PWM_MAKE (0,255,4)''(dim jj as byte,dim max_duty,Pwm_chanel as integer)
'    PWM_MAKE (100,255,1)
'    PWM_MAKE (100,255,2)
'    PWM_MAKE (100,255,3)
'    PWM_MAKE (100,255,4)
'    PWM_MAKE (100,255,5)
'    PWM_MAKE (100,255,6)
'    PWM_MAKE (100,255,7)
'    delay_ms(100)
'    PWM_MAKE (0,255,1)
'    PWM_MAKE (0,255,2)
'    PWM_MAKE (0,255,3)
'    PWM_MAKE (0,255,4)
'    PWM_MAKE (0,255,5)
'    PWM_MAKE (0,255,6)
'    PWM_MAKE (0,255,7)

'    SetPWM0(0)
end sub
sub procedure on_off_initial_old_chnged_newxt_hourtosecond (dim on_off22,en,hr,mint,prc as byte)
' on_off2=1       'on time
dim Pwm_chanel_ini,chanel_ini,week_ini as byte
     Lcd_0() lcd_out(1,1,"Initialsiing on_a_0")
     delay_ms(500)
     for week_ini =1 to 7
     for Pwm_chanel_ini=1 to 7
     for chanel_ini =1 to 1
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][0] =en
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][1]=hr
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][2] =mint
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][3]=prc
'      Delay_mS(1000)
'       next on_off2
     next chanel_ini
     for chanel_ini =2 to 4
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][0] =0
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][1]=hr
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][2] =mint
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][3]=0
'      Delay_mS(1000)
'       next on_off2
     next chanel_ini
      next Pwm_chanel_ini
      next week_ini

end sub

sub procedure on_off_initial (dim on_off22,en,hr,mint,prc as byte)
' on_off2=1       'on time
dim Pwm_chanel_ini,chanel_ini,week_ini as byte
     Lcd_0() lcd_out(1,1,"Initialsiing on_a_0")
     delay_ms(500)
     for week_ini =1 to 7
     for Pwm_chanel_ini=1 to 7
     for chanel_ini =1 to 1
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][0] =en
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][1]=hr
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][2] =mint
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][3]=prc
'      Delay_mS(1000)
'       next on_off2
     next chanel_ini
     for chanel_ini =2 to 4
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][0] =0
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][1]=hr
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][2] =mint
         on_a_0 [week_ini-1][chanel_ini-1][Pwm_chanel_ini-1][on_off22-1][3]=0
'      Delay_mS(1000)
'       next on_off2
     next chanel_ini
      next Pwm_chanel_ini
      next week_ini

end sub

sub procedure  WDT_on()



'/* reset WDT */

'_WDR()

'|--------------------------------------------------------------------|
'| Watchdog Timer Prescale Select                           |
'|--------------------------------------------------------------------|
'| WDP3 WDP2 WDP1 WDP0   Number of WDT            Typical Time-out    |
'|                      Oscillator Cycles         at VCC = 5.0V       |
'|--------------------------------------------------------------------|
'|  0   0   0    0   |    2K (2048) cycles           16 ms            |
'|  0   0   0    1   |    4K (4096) cycles           32 ms            |
'|  0   0   1    0   |    8K (8192) cycles           64 ms            |
'|  0   0   1    1   |   16K (16384) cycles        0.125 s            |
'|  0   1   0    0   |   32K (32768) cycles         0.25 s            |
'|  0   1   0    1   |   64K (65536) cycles          0.5 s            |
'|  0   1   1    0   |  128K (131072) cycles         1.0 s            |
'|  0   1   1    1   |  256K (262144) cycles         2.0 s            |
'|  1   0   0    0   |  512K (524288) cycles         4.0 s            |
'|  1   0   0    1   | 1024K (1048576) cycles        8.0 s            |
'|  1   0   1    0   |------------------------------------------------|
'|  1   0   1    1   |                                                |
'|  1   1   0    0   |                                                |
'|  1   1   0    1   |                 R E S E R V E D                |
'|  1   1   1    0   |                                                |
'|  1   1   1    1   |                                                |
'|--------------------------------------------------------------------|
'/* Write logical one to WDCE and WDE */
 WDTCR =(1<<WDP2) or (1<<WDP1)  or (1<<WDP0)
' WDTCR = 0x0F   ' //prescaller time 1,8s
' //////////////////////////////////watchdog enable
'WDTCR |= (1<<WDCE) | (1<<WDE)  ''//watchdog enable
'WDTCR = 0x0F   ' //prescaller time 1,8s
'//////////////////////////////////watchdog enable
 Lcd_Cmd(_LCD_CLEAR)
 Lcd_Out(2,2,"Reset.")
'WDTCR = 0x00
'WDTCR |= (1<<



end sub


end.